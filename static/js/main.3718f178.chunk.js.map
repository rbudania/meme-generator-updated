{"version":3,"sources":["logo.svg","Header.js","Meme.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Meme","state","toptext","bottomtext","randomimg","allimages","changebottomtext","bind","changetoptext","submitHandle","fetch","then","response","json","memes","data","setState","event","this","target","value","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","onSubmit","type","name","onChange","React","Component","Footer","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3718f178.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './App.css'\r\nfunction Header()\r\n{\r\n    return(\r\n        <div className='header'> \r\n             <header>\r\n                 <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"                    \r\n                 />\r\n                 <p>MEME GENERATOR</p>\r\n             </header>\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default Header","import React from 'react'\r\n\r\nclass Meme extends React.Component{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            toptext:\"\",\r\n            bottomtext:\"\",\r\n            randomimg:\"http://i.imgflip.com/1bij.jpg\",\r\n            allimages:[]\r\n    }\r\n    this.changebottomtext=this.changebottomtext.bind(this);\r\n    this.changetoptext=this.changetoptext.bind(this);\r\n    this.submitHandle=this.submitHandle.bind(this);\r\n    }   \r\n    // in betwwen we have to call the component did mount so that we can make an API call \r\n    //these are in built methods in react\r\n    componentDidMount()\r\n    {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                \r\n                this.setState({ allimages: memes })\r\n            })\r\n    }\r\n\r\n    changebottomtext(event)\r\n    {\r\n        this.setState({bottomtext: event.target.value})\r\n    }\r\n    changetoptext(event)\r\n    {\r\n        this.setState({toptext: event.target.value})\r\n    }\r\n    submitHandle(event)\r\n    {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allimages.length)\r\n        const randMemeImg = this.state.allimages[randNum].url;\r\n        this.setState({ randomimg: randMemeImg })\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n         <div>\r\n                <form onSubmit={this.submitHandle}>\r\n                    <label className=\"label\">\r\n                     TOPTEXT:\r\n                        <input type=\"text\" name=\"toptext\" value={this.state.toptext}\r\n                        onChange={this.changetoptext}                        \r\n                        />\r\n                     </label>\r\n                     <br/>\r\n                                         <label className=\"label\">\r\n                     BOTTOMTEXT:\r\n                        <input type=\"text\"  name=\"bottomtext\"\r\n                            value={this.state.bottomtext}\r\n                            onChange={this.changebottomtext}\r\n                        />\r\n                     </label>\r\n                     <br/>\r\n                    <input type=\"submit\" value=\"Generate\" className='button' />\r\n</form>\r\n  \r\n        <div className='meme'>\r\n            <img src={this.state.randomimg} className=\"image\" />\r\n            <h2 className=\"top\">{this.state.toptext}</h2>\r\n            <h2 className=\"bottom\">{this.state.bottomtext}</h2>\r\n        </div>\r\n         </div>             \r\n        )\r\n    }\r\n}\r\nexport default Meme","import React from 'react'\r\nimport './App.css'\r\nfunction Footer()\r\n{\r\n    return(\r\n       <footer >           \r\n           THIS MEME GENERATOR IS DEVELOPED BY RAJAT BUDANIA\r\n           </footer>\r\n    )\r\n}\r\nexport default Footer","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Header'\nimport Meme from './Meme'\nimport Footer from './Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">         \n          <Header/>\n          <Meme/>\n          <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}